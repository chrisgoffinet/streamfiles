// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}
var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_58b639af0c8caa21, []int{0}
}

type Chunk struct {
	Filename             string   `protobuf:"bytes,1,opt,name=Filename,proto3" json:"Filename,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_58b639af0c8caa21, []int{0}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (dst *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(dst, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type UploadStatus struct {
	Message              string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=api.UploadStatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadStatus) Reset()         { *m = UploadStatus{} }
func (m *UploadStatus) String() string { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()    {}
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_58b639af0c8caa21, []int{1}
}
func (m *UploadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadStatus.Unmarshal(m, b)
}
func (m *UploadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadStatus.Marshal(b, m, deterministic)
}
func (dst *UploadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadStatus.Merge(dst, src)
}
func (m *UploadStatus) XXX_Size() int {
	return xxx_messageInfo_UploadStatus.Size(m)
}
func (m *UploadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UploadStatus proto.InternalMessageInfo

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetCode() UploadStatusCode {
	if m != nil {
		return m.Code
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterType((*Chunk)(nil), "api.Chunk")
	proto.RegisterType((*UploadStatus)(nil), "api.UploadStatus")
	proto.RegisterEnum("api.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Storage_UploadClient, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Storage_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/api.Storage/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageUploadClient{stream}
	return x, nil
}

type Storage_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type storageUploadClient struct {
	grpc.ClientStream
}

func (x *storageUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	Upload(Storage_UploadServer) error
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Upload(&storageUploadServer{stream})
}

type Storage_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type storageUploadServer struct {
	grpc.ServerStream
}

func (x *storageUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Storage_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_58b639af0c8caa21) }

var fileDescriptor_api_58b639af0c8caa21 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x4f, 0x4b, 0x87, 0x30,
	0x18, 0xc7, 0x9d, 0xd5, 0xcc, 0x27, 0x89, 0xf5, 0x40, 0x20, 0x9e, 0xc4, 0x93, 0x15, 0x78, 0x50,
	0xe8, 0xd6, 0x49, 0xf0, 0x16, 0x81, 0xe2, 0x0b, 0x58, 0x38, 0x6a, 0x68, 0xdb, 0xd0, 0x49, 0x6f,
	0x3f, 0xb6, 0x30, 0xe2, 0xf7, 0x3b, 0x7e, 0xf9, 0xfe, 0xf9, 0x6c, 0x0f, 0xc4, 0xdc, 0xc8, 0xca,
	0xac, 0xda, 0x6a, 0xbc, 0xe0, 0x46, 0x16, 0x2f, 0x70, 0xd5, 0x7e, 0xee, 0x6a, 0xc6, 0x0c, 0xae,
	0x3b, 0xb9, 0x08, 0xc5, 0xbf, 0x44, 0x4a, 0x72, 0x52, 0xc6, 0xfd, 0x9f, 0xc6, 0x14, 0xa2, 0x56,
	0x2b, 0x2b, 0x94, 0x4d, 0xc3, 0x9c, 0x94, 0x49, 0x7f, 0xc8, 0x62, 0x80, 0x64, 0x34, 0x8b, 0xe6,
	0xd3, 0x60, 0xb9, 0xdd, 0x37, 0x97, 0x7c, 0x15, 0xdb, 0xc6, 0x3f, 0x8e, 0x91, 0x43, 0xe2, 0x03,
	0x5c, 0xb6, 0x7a, 0x12, 0x7e, 0xe0, 0xb6, 0xbe, 0xaf, 0xdc, 0x3b, 0xfe, 0x57, 0x9d, 0xd9, 0xfb,
	0xc8, 0x63, 0x03, 0xec, 0xd4, 0xc1, 0x1b, 0x88, 0x46, 0x35, 0x2b, 0xfd, 0xad, 0x58, 0x80, 0x14,
	0xc2, 0xb7, 0x99, 0x11, 0x04, 0xa0, 0x1d, 0x97, 0x8b, 0x98, 0x58, 0x58, 0x3f, 0x43, 0x34, 0x58,
	0xbd, 0x3a, 0xd4, 0x13, 0xd0, 0xdf, 0x3e, 0x82, 0xc7, 0xf8, 0x0f, 0x66, 0x77, 0x67, 0xc8, 0x22,
	0x28, 0xc9, 0x3b, 0xf5, 0xc7, 0x68, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xb0, 0x2b, 0x19,
	0x19, 0x01, 0x00, 0x00,
}
